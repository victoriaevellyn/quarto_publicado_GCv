homemnaonegro = case_when(homem==1 & negro==1~1,
TRUE~0),
homemnegro = case_when(homem==1 & negro==1~1,
TRUE~0),
mulhernaonegra = case_when(mulher==1 & naonegro==1~1,
TRUE~0),
mulhernegra = case_when(mulher==1 & negro==1~1,
TRUE~0)
)
table(RAIS2010DF$naonegro, RAIS2010DF$raca_cor)
table(RAIS2010DF$negro, RAIS2010DF$raca_cor)
MPL3_42010DF <- RAIS2010DF %>%
mutate(ggrupoCBO2002 = substr(cbo_2002, start = 1, stop = 1)) %>%
filter(ggrupoCBO2002==1 & raca_cor!=9) %>%
group_by(sexo, raca_cor) %>%
summarise(n=n())
View(MPL3_42010DF)
RAIS2010DF <- RAIS2010DF %>%
mutate(homem = case_when(sexo==1~1,
TRUE~0),
mulher= case_when(sexo==2~1,
TRUE~0),
negro = case_when(raca_cor==c(4,8)~1,
TRUE~0),
naonegro = case_when(raca_cor==1|raca_cor==2|raca_cor==6~1,
TRUE~0),
homemnaonegro = case_when(homem==1 & negro==1~1,
TRUE~0),
homemnegro = case_when(homem==1 & negro==1~1,
TRUE~0),
mulhernaonegra = case_when(mulher==1 & naonegro==1~1,
TRUE~0),
mulhernegra = case_when(mulher==1 & negro==1~1,
TRUE~0),
negronaonegro= case_when(negro==1~1,
naonegro==1~2,
TRUE~0))
MPL3_42010DF <- RAIS2010DF %>%
mutate(ggrupoCBO2002 = substr(cbo_2002, start = 1, stop = 1)) %>%
filter(ggrupoCBO2002==1 & raca_cor!=9) %>%
group_by(sexo, negronaonegro) %>%
summarise(n=n())
View(MPL3_42010DF)
table(RAIS2010DF$negronaonegro, RAIS2010DF$raca_cor)
table(RAIS2010DF$naonegro, RAIS2010DF$raca_cor)
table(RAIS2010DF$negro, RAIS2010DF$raca_cor)
RAIS2010DF <- RAIS2010DF %>%
mutate(homem = case_when(sexo==1~1,
TRUE~0),
mulher= case_when(sexo==2~1,
TRUE~0),
negro = case_when(raca_cor==4|raca_cor==8~1,
TRUE~0),
naonegro = case_when(raca_cor==1|raca_cor==2|raca_cor==6~1,
TRUE~0),
homemnaonegro = case_when(homem==1 & negro==1~1,
TRUE~0),
homemnegro = case_when(homem==1 & negro==1~1,
TRUE~0),
mulhernaonegra = case_when(mulher==1 & naonegro==1~1,
TRUE~0),
mulhernegra = case_when(mulher==1 & negro==1~1,
TRUE~0),
negronaonegro= case_when(negro==1~1,
naonegro==1~2,
TRUE~0))
MPL3_42010DF <- RAIS2010DF %>%
mutate(ggrupoCBO2002 = substr(cbo_2002, start = 1, stop = 1)) %>%
filter(ggrupoCBO2002==1 & raca_cor!=9) %>%
group_by(sexo, negronaonegro) %>%
summarise(n=n())
View(MPL3_42010DF)
library(readr)
rais2017a2021 <- read_delim("C:/Users/vicky/Downloads/bgetrab_20230918154913605.csv",
delim = ",", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
select= c("Ano Declaração RAIS", "CNPJ / CEI", "Ind RAIS Negativa - Nome"), trim_ws = TRUE)
library(readr)
rais2017a2021 <- read_delim("C:/Users/vicky/Downloads/bgetrab_20230918154913605.csv",
delim = ",", escape_double = FALSE, locale = locale(encoding = "LATIN1"),
trim_ws = TRUE)
rais2017a2021 <- select(rais2017a2021, "Ano Declaração RAIS",
"CNPJ / CEI",
"Ind RAIS Negativa - Nome")
library(dplyr)
rais2017a2021 <- select(rais2017a2021, "Ano Declaração RAIS",
"CNPJ / CEI",
"Ind RAIS Negativa - Nome")
RAIS17 <- rais2017a2021 %>% filter(Ano Declaração RAIS==2017)
RAIS17 <- rais2017a2021 %>% filter(´Ano Declaração RAIS´==2017)
RAIS17 <- rais2017a2021 %>% filter("Ano Declaração RAIS"==2017)
View(rais2017a2021)
rais2017a2021 <- rename(ano = "Ano Declaração RAIS",
cnpjcei = "CNPJ / CEI",
indraisneg = "Ind RAIS Negativa - Nome")
rais2017a2021 <- mutate(ano = "Ano Declaração RAIS",
cnpjcei = "CNPJ / CEI",
indraisneg = "Ind RAIS Negativa - Nome")
rais2017a2021 <- rename(rais2017a2021, as.factor(ano = "Ano Declaração RAIS",
cnpjcei = "CNPJ / CEI",
indraisneg = "Ind RAIS Negativa - Nome"))
rais2017a2021 <- rename(rais2017a2021, (ano = "Ano Declaração RAIS",
rais2017a2021 <- rename(rais2017a2021, (ano = `Ano Declaração RAIS`,
rais2017a2021 <- rais2017a2021 %>%
rename( ano = `Ano Declaração RAIS`,
cnpjcei = `CNPJ / CEI`,
indraisneg = `Ind RAIS Negativa - Nome`)
View(rais2017a2021)
RAIS17 <- rais2017a2021 %>% filter(ano==2017)
RAIS17 <- rais2017a2021 %>% filter(ano==2017)
RAIS18 <- rais2017a2021 %>% filter(ano==2018)
RAIS19 <- rais2017a2021 %>% filter(ano==2019)
RAIS20 <- rais2017a2021 %>% filter(ano==2020)
RAIS21 <- rais2017a2021 %>% filter(ano==2021)
write.table(rais2017a2021, file="rais2017a2021cnpjs.csv", row.names = F, sep = ";", dec = ",", fileEncoding = "latin1")
rm(rais2017a2021)
teste <- rbind_list(RAIS17, RAIS18)
mortas2018 <- inner_join(RAIS17, RAIS18,
by="cnpjcei")
mortas2018 <- anti_join(RAIS17, RAIS18,
by="cnpjcei")
library(data.table)
teste <- rbind_list(RAIS17, RAIS18)
teste <- rbindlist(RAIS17, RAIS18)
lazaros2019 <- inner_join(mortas2018, RAIS19,
by="cnpjcei")
View(lazaros2019)
data(ChickWeight)
# Visualizar as primeiras linhas do conjunto de dados
head(ChickWeight)
# Sumarizar informações do conjunto de dados
summary(ChickWeight)
subset_ChickWeight <- ChickWeight
install.packages("caret")
library(caret)
head(ChickWeight)
# Passo 1: Carregar o conjunto de dados e explorá-lo.
# Carregar o conjunto de dados Iris
data(iris)
# Visualizar as primeiras linhas do conjunto de dados
head(iris)
# Sumarizar informações do conjunto de dados
summary(iris)
dados_classificacao <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")]
summary(ChickWeight)
head(ChickWeight)
dados_classificacao_ChickWeight <- ChickWeight[, c("weight", "Time", "Chick", "Diet")]
set.seed(123) # Para reprodutibilidade
trainIndex <- createDataPartition(ChickWeight$Diet, p = 0.8,
list = FALSE,
times = 1)
dados_classificacao <- iris[, c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")]
# Dividir o conjunto de dados em treinamento e teste
set.seed(123)  # Define uma semente para reprodução dos resultados
amostra <- sample(1:nrow(dados_classificacao), 0.7 * nrow(dados_classificacao))  # 70% dos dados para treinamento
dados_treinamento <- dados_classificacao[amostra, ]
dados_teste <- dados_classificacao[-amostra, ]
# Criar os conjuntos de dados de treino e teste
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
library(rpart)
treeModel <- rpart(Diet ~ Time + weight, data = trainSet, method = "class")
printcp(treeModel)
head(ChickWeight)
View(ChickWeight)
View(iris)
head(ChickWeight)
printcp(treeModel)
treeModel <- rpart(Chick ~ Time + weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
plot(treeModel)
text(treeModel)
predictions <- predict(treeModel, newdata = testSet, type = "class")
confusionMatrix <- table(Predicted = predictions, Actual = testSet$Diet)
confusionMatrix <- table(Predicted = predictions, Actual = testSet$Chick)
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
accuracy
recall <- diag(confusionMatrix) / rowSums(confusionMatrix)
recall
library(rpart)
arvore_decisao <- rpart(Species ~ ., data = dados_treinamento, method = "class")
arvore_decisao
# Visualizar a árvore de decisão
plot(arvore_decisao)
text(arvore_decisao)
specificity
summary(recall)
# Calcular a matriz de confusão
matriz_confusao <- table(Real = dados_teste$Species, Previsto = previsoes)
# Fazer previsões no conjunto de teste
previsoes <- predict(arvore_decisao, newdata = dados_teste, type = "class")
# Calcular a matriz de confusão
matriz_confusao <- table(Real = dados_teste$Species, Previsto = previsoes)
# Calcular a precisão, sensibilidade e especificidade
precisao <- sum(diag(matriz_confusao)) / sum(matriz_confusao)
sensibilidade <- matriz_confusao[2, 2] / sum(matriz_confusao[2, ])
especificidade <- matriz_confusao[1, 1] / sum(matriz_confusao[1, ])
sensibilidade
recall <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
recal
recall
head(matriz_confusao)
head(confusionMatrix)
precision(precisao)
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
accuracy
precisao <- sum(diag(matriz_confusao)) / sum(matriz_confusao)
precisao
sensibilidade
head(matriz_confusao)
confusionMatrix <- table(Predicted = predictions, Actual = testSet$Chick)
head(confusionMatrix)
testSet$Chick <- as.factor(testSet$Chick)
confusionMatrix <- table(Predicted = predictions, Actual = testSet$Chick)
head(confusionMatrix)
testSet$Chick <- as.factor(testSet$Chick)
predictions <- predict(treeModel, newdata = testSet, type = "class")
# Calcular a matriz de confusão
confusionMatrix <- table(Predicted = predictions, Actual = testSet$Chick)
head(confusionMatrix)
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
head(confusionMatrix)
View(treeModel)
summary(treeModel)
specificity <- diag(confusionMatrix) / colSums(confusionMatrix)
specificity
matriz_confusao[2}
matriz_confusao[2]
View(iris)
table(matriz_confusao)
table(confusionMatrix)
matriz_confusao
confusionMatrix
table(testSet$Chick)
table(trainSet$Chick)
table(dados_teste)
View(dados_classificacao)
trainIndex <- sample(1:nrow(dados_classificacao_ChickWeight), 0.8 * nrow(dados_classificacao_ChickWeight))  # 80% dos dados para treinamento
# Criar os conjuntos de dados de treino e teste
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
# Ajustar um modelo de Árvore de Decisão
library(rpart)
# Ajustar a àrvore de decisão
# Alterar a variável de resposta para categórica
trainSet$Chick <- as.factor(trainSet$Chick)
# Ajustar a àrvore de decisão
treeModel <- rpart(Chick ~ Time + weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
testSet$Chick <- as.factor(testSet$Chick)
predictions <- predict(treeModel, newdata = testSet, type = "class")
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
table(testSet$Chick)
table(trainSet$Chick)
teste <- anti_join(trainSet, testSet, by=Chick)
library(dplyr)
teste <- anti_join(trainSet, testSet, by=Chick)
teste <- anti_join(trainSet, testSet, by="Chick")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
order(trainSet, by=Chick)
order(trainSet)
order(trainSet$Chick)
trainSet <- order(trainSet$Chick)
testSet <- order(testSet$Chick)
library(dplyr)
teste <- anti_join(trainSet, testSet, by=Chick)
teste <- anti_join(trainSet, testSet)
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
order(trainSet)
order(trainSet$Chick)
order(trainSet)
order(trainSet$Chick)
order(trainSet$Chick)
trainSet$Chick <- sort(trainSet$Chick)
trainSet$Chick <- trainSet %>%  sort(Chick)
trainSet$Chick <- trainSet %>%  order(Chick)
table(testSet$Chick)
table(trainSet$Chick)
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
teste <- anti_join(trainSet, testSet, by=Chick)
View(testSet)
View(trainSet)
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
trainSet$Chick <- trainSet %>%  filter(Chick!==49 |Chick!==50)
trainSet <- trainSet %>%  filter(Chick!==49 |Chick!==50)
trainSet <- trainSet |>  filter(Chick!==49 |Chick!==50)
library(magrittr)
trainSet <- trainSet %>%  filter(Chick!==49 |Chick!==50)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick!=49 |Chick!=50)
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
table(testSet$Chick)
table(trainSet$Chick)
trainSet <- trainSet %>%  filter(Chick!=49 |Chick!=50)
table(trainSet$Chick)
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick!=49 |Chick!=50)
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
table(testSet$Chick)
table(trainSet$Chick)
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick!=49 |Chick!=50)
trainSet <- filter((trainSet$Chick!=49 |(trainSet$Chick!=50)
>
>
trainSet <- filter(trainSet$Chick!=49 |trainSet$Chick!=50)
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
trainSet <- filter(trainSet$Chick!=49 |trainSet$Chick!=50)
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
trainSet <- filter(trainSet$Chick!=49 |trainSet$Chick!=50)
trainSet <- trainSet %>%  filter(Chick!=49 |Chick!=50)
trainSet <- trainSet %>%  filter(Chick!='49' |Chick!='50')
trainSet <- trainSet %>%  filter(Chick==c(1:48))
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
trainSet <- trainSet %>%  filter(Chick==c(1:48))
View(trainSet)
trainSet <- trainSet %>%  filter(Chick<=48)
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick<=48)
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
table(testSet$Chick)
table(trainSet$Chick)
# Ajustar um modelo de Árvore de Decisão
library(rpart)
# Ajustar a àrvore de decisão
# Alterar a variável de resposta para categórica
trainSet$Chick <- as.factor(trainSet$Chick)
# Ajustar a àrvore de decisão
treeModel <- rpart(Chick ~ Time + weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
table(testSet$Chick)
table(trainSet$Chick)
predictions <- predict(treeModel, newdata = testSet, type = "class")
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
accuracy
sensitivity <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
sensitivity
specificity <- diag(confusionMatrix) / colSums(confusionMatrix)
specificity
specificity <- confusionMatrix[1, 1] / sum(confusionMatrix[1, ])
specificity
precisao <- sum(diag(matriz_confusao)) / sum(matriz_confusao)
sensibilidade <- matriz_confusao[2, 2] / sum(matriz_confusao[2, ])
especificidade <- matriz_confusao[1, 1] / sum(matriz_confusao[1, ])
precisao
sensibilidade
especificidade
sensitivity <- confusionMatrix[3, 3] / sum(confusionMatrix[3, ])
sensitivity
sensitivity <- confusionMatrix[4, 4] / sum(confusionMatrix[4, ])
sensitivity
sensitivity <- confusionMatrix[5, 5] / sum(confusionMatrix[5, ])
sensitivity
# Prever a variável Diet, com uma divisão de 80% para treino e 20% para teste
set.seed(1234) # Para reprodutibilidade
trainIndex <- sample(1:nrow(dados_classificacao_ChickWeight), 0.7 * nrow(dados_classificacao_ChickWeight))  # 80% dos dados para treinamento
# Criar os conjuntos de dados de treino e teste
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
# Tratando as bases para ficarem somente com as mesmas observações de Chick
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick<=48)
# Alterar a variável de resposta para categórica
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
table(testSet$Chick)
table(trainSet$Chick)
'''
No passo 2, criamos um subconjunto dos dados
que contém todas as variáveis,
incluindo a variável de resposta (Chick),
e dividimos os dados em conjuntos de treinamento e teste.
'''
# Ajustar um modelo de Árvore de Decisão
library(rpart)
# Ajustar a àrvore de decisão
# Ajustar a àrvore de decisão
treeModel <- rpart(Chick ~ Time + weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
# Fazer previsões no conjunto de teste
predictions <- predict(treeModel, newdata = testSet, type = "class")
# Calcular a matriz de confusão
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
# Calcular a precisão, sensibilidade e especificidade
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
accuracy
sensitivity <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
sensitivity
trainIndex <- sample(1:nrow(dados_classificacao_ChickWeight), 0.6 * nrow(dados_classificacao_ChickWeight))  # 80% dos dados para treinamento
# Criar os conjuntos de dados de treino e teste
trainSet <- ChickWeight[trainIndex, ]
testSet <- ChickWeight[-trainIndex, ]
# Tratando as bases para ficarem somente com as mesmas observações de Chick
testSet$Chick <- as.numeric(testSet$Chick)
trainSet$Chick <- as.numeric(trainSet$Chick)
library(dplyr)
trainSet <- trainSet %>%  filter(Chick<=48)
# Alterar a variável de resposta para categórica
testSet$Chick <- as.factor(testSet$Chick)
trainSet$Chick <- as.factor(trainSet$Chick)
table(testSet$Chick)
table(trainSet$Chick)
#Passo 3: Ajustar um modelo de Árvore de Decisão.
# Ajustar um modelo de Árvore de Decisão
library(rpart)
# Ajustar a àrvore de decisão
# Ajustar a àrvore de decisão
treeModel <- rpart(Chick ~ Time + weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
predictions <- predict(treeModel, newdata = testSet, type = "class")
# Calcular a matriz de confusão
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
# Calcular a precisão, sensibilidade e especificidade
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
accuracy
sensitivity <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
sensitivity
sensitivity <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
sensitivity
specificity <- confusionMatrix[1, 1] / sum(confusionMatrix[1, ])
specificity
cat("Precisão (Accuracy):", accuracy, "\n")
cat("Sensibilidade (Sensitivity):", sensitivity, "\n")
cat("Especificidade(Specificity):", specificity, "\n")
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(treeModel, type = 2, extra = 101, fallen.leaves = FALSE, box.palette = "auto", shadow.col = "gray")
table(ChickWeight$Diet, ChickWeight$Chick)
View(iris)
?iris
# Ajustar a àrvore de decisão
treeModel <- rpart(Chick ~ weight + Diet, data = trainSet, method = "class")
printcp(treeModel)
# Visualizar a árvore de decisão
plot(treeModel)
text(treeModel)
'''
No passo 3, ajustamos um modelo de Árvore de Decisão
usando a função rpart().
O modelo visa classificar o crescimento dos pintinhos
com base nas medidas da weight e time e diet.
A visualização da árvore de decisão mostra
como o modelo divide os dados em
diferentes grupos com base em regras de decisão.
'''
# Fazer previsões no conjunto de teste
predictions <- predict(treeModel, newdata = testSet, type = "class")
# Calcular a matriz de confusão
confusionMatrix <- table(Actual = testSet$Chick, Predicted = predictions)
# Calcular a precisão, sensibilidade e especificidade
accuracy <- sum(diag(confusionMatrix)) / sum(confusionMatrix)
sensitivity <- confusionMatrix[2, 2] / sum(confusionMatrix[2, ])
specificity <- confusionMatrix[1, 1] / sum(confusionMatrix[1, ])
cat("Precisão (Accuracy):", accuracy, "\n")
cat("Sensibilidade (Sensitivity):", sensitivity, "\n")
cat("Especificidade(Specificity):", specificity, "\n")
install.packages("dados")
library(dados)
names(dados)
library(dados)
casas <- dados::casas
names(casas)
install.packages("esquisse")
library(esquisse)
esquisser()
setwd("D:/MBA Ciência dos Dados UFF/GC e visualizadores/trabalho_GCvisu/quarto_publicado_GCv")
quarto preview
setwd("D:/MBA Ciência dos Dados UFF/GC e visualizadores/trabalho_GCvisu/quarto_publicado_GCv")
